// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using online_store_app.Data;

#nullable disable

namespace online_store_app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231212143628_InitialSetup")]
    partial class InitialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("online_store_app.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("online_store_app.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("online_store_app.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Picture & sound"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 4,
                            Name = "Phones & tablets"
                        },
                        new
                        {
                            Id = 5,
                            DisplayOrder = 5,
                            Name = "Hobbies & free time"
                        });
                });

            modelBuilder.Entity("online_store_app.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "GeForce RTX 30 series graphics processors provide extreme performance for both gamers and creative workers. The secret to power is Ampere - NVIDIA's second-generation RTX architecture, with renewed RT and Tensor cores and SM multiprocessors ensuring the most realistic ray-tracing graphics and state-of-the-art AI functions yet",
                            EAN = "4711081309925",
                            ImageUrl = "https://i.imgur.com/azEiXOi.png",
                            Name = "Asus GeForce DUAL-RTX3060-O12G-V2 Graphics card",
                            Price = 299.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "The NVIDIA Ada Lovelace architecture of the TUF Gaming GeForce RTX 4080 graphics card is supported by efficient cooling and power supply, as well as performance-enhancing reinforcements. Download, secure and prepare to win.",
                            EAN = "4711081950745",
                            ImageUrl = "https://i.imgur.com/agJa6nK.png",
                            Name = "Asus GeForce TUF-RTX4080-16G-GAMING Graphics card",
                            Price = 1369.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Based on the groundbreaking AMD RDNA 3 architecture with chiplet technology, the AMD Radeon RX 7800 series delivers next-generation performance, visuals and efficiency at 4K and beyond. The Radeon RX 7800 series graphics feature advanced AMD RDNA 3 compute units, second-generation ray tracing, and new AI accelerators to deliver incredible performance and maximize graphic fidelity.",
                            EAN = "4895106294349",
                            ImageUrl = "https://i.imgur.com/LUvFWCe.png",
                            Name = "Sapphire PULSE RX 7800 XT Gaming 16 Gt Graphics card",
                            Price = 619.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "The PS5 console offers new, unexpected gaming possibilities. Enjoy lightning-fast charging, ultra-fast SSD drive and immersive features such as haptic feedback, adaptive triggers, 3D sound and a brand new generation of PlayStation games.",
                            EAN = "0711719576778",
                            ImageUrl = "https://i.imgur.com/lIqutAw.png",
                            Name = "Sony PlayStation 5 (PS5) Call of Duty: Modern Warfare III Console & Game bundle",
                            Price = 489.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "The Microsoft Xbox Series X offers the most powerful Xbox console we've seen. Xbox Series X offers consoles unprecedented power and performance in a stunning package. The console is equipped with a disc drive, so you can enjoy not only digital games but also physical games on discs.",
                            EAN = "0889842640809",
                            ImageUrl = "https://i.imgur.com/Ty8T94a.png",
                            Name = "Microsoft Xbox Series X Console",
                            Price = 438.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "PlayStation 5's DualSense wireless controller features haptic feedback that brings you closer to games, dynamically adaptive triggers and a built-in microphone – all in the same iconic controller.",
                            EAN = "0711719399506",
                            ImageUrl = "https://i.imgur.com/MwlBwh7.png",
                            Name = "Sony DualSense Gaming Controller, white, PS5",
                            Price = 49.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "Samsung CU7172 / CU7192 in 55 inch size is Samsung's Crystal UHD TV. The high-definition 4K UHD resolution really comes to life when you watch HDR material from the most popular streaming services supported by the Tizen 2023 operating system.",
                            EAN = "8806094853483",
                            ImageUrl = "https://i.imgur.com/q6S6KYM.png",
                            Name = "Samsung CU7172 55\" 4K LED TV",
                            Price = 399.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Description = "OnePlus Open is a phone with a folding screen that does not compromise on the camera. The revolutionary Hasselblad mobile camera system with three Pro-level cameras, highlighted by Sony's new LYTIA \"Pixel Stacked\" sensor. The OnePlus Open's camera capabilities have not been compromised, even in a compact and slim size. Three cameras, each of which stands at its best alongside conventional non-folding flagship phones. You can be sure that every moment and angle can be captured with uncompromising clarity.",
                            EAN = "6921815625674",
                            ImageUrl = "https://i.imgur.com/yfFoVkO.png",
                            Name = "OnePlus Open 5G Phone, 512/16 Gb, green",
                            Price = 1799.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Description = "Apple iPhone 13. The most advanced iPhone dual camera system. Lightning fast A15 Bionic chip. Big leap in battery life. Durable construction. Super fast 5G. And a brighter Super Retina XDR display.",
                            EAN = "0194252903834",
                            ImageUrl = "https://i.imgur.com/vLN5QGj.png",
                            Name = "Apple iPhone 13 128GB Phone, Midnight",
                            Price = 668.99m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Description = "Baana Flesu has been striving to be the most handsome fat bike in town for seven years, always with a little improvement!\r\nA good and affordable fatbike with an excellent price-quality ratio keeps things simple and is still badass. The sturdy aluminum is a durable and light frame compared to the steel of the cheapest fat bikes. The suspension provided by the thick tires makes the ride smooth, so you don't need a separate suspension.",
                            EAN = "6438148036997",
                            ImageUrl = "https://i.imgur.com/WKvJ5s8.png",
                            Name = "Baana Flesu 26\" SE fatbike",
                            Price = 399.99m,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("online_store_app.Models.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("online_store_app.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("online_store_app.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("online_store_app.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("online_store_app.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("online_store_app.Models.Address", b =>
                {
                    b.HasOne("online_store_app.Data.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("online_store_app.Models.Product", b =>
                {
                    b.HasOne("online_store_app.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("online_store_app.Models.ProductReview", b =>
                {
                    b.HasOne("online_store_app.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("online_store_app.Data.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("online_store_app.Models.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
